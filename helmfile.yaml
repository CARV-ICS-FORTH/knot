environments:
  # Default deployment for development with Docker Desktop.
  default:
    values:
    - ingress:
        host: {{ env "IP_ADDRESS" | default "192.168.1.1" }}.nip.io
        service:
          type: LoadBalancer
        createSelfsignedCertificate: true
    - jupyterHub:
        enabled: true
        persistence:
          provisioning: auto
        clientID: 56kSn87XXbk4GuFBQ7zQrXcVQNyyMWKb1vR2diUZ
        clientSecret: FvxWxBTbhgQbo1sGbc6yLsza0Vwo6jZQBpiOSDYcghCjWWcpRzBygzJSQ8M4CunflPn9pCOr25vVnGr0N2ytR6FjklSesc28BqkHSM6aVIYA5RKFZaOpiMj9Ghc5VDfN
    - argo:
        enabled: true
        clientID: T8DrPY49xlYvjsJ1nUIhxs17fG07gMZpQSOM7d3K
        clientSecret: 6TjANPj1oe59MexsTYdMV5yiSyOYULDEzkyxfff4CmAPFa8mQ1dhYE7BHeEEVyg1tRgTkXRWYj2zhiKLiLZvhUGDnrixQQDshrWVtWCgQX23Vmdo37ktuVmsgOEfO2eG
    - harbor:
        enabled: true
        persistence:
          provisioning: auto
        adminPassword: Harbor12345
        secretKey: 4sdcg3urQQd00vHU
        clientID: XAOdj9vN5BAjKJD0XjRMlqNybdlRKCF1XcOJHmPT
        clientSecret: rgRQVzfZnoU9WAOqfni5hyC0bXZHjKPyLKOCUVfmBBWbVdaMRQfuep7lPKDjef5bZDxYc4OpiVjGMpXuRye872ATHejjMRKvfPAOA482uh2SjpwmIKUBigBZaVKFkYF3
    - grafana:
        enabled: true
        clientID: tSlY0FSd7tmS7jR0J6KLyIhisd9yYitlmyx3oVb3
        clientSecret: eYLaIV2NtZHhR7M9zh1ouLl4LpuwwpcrYBspXbS2gTCm61Hn01ghmZf7iBxxk5r3SdPHnlg6Ovm6IKK4CmJKNl8gnkvxjmOt7YOxZJR0BJH8DPHnA9Nh6pHpmESM8mfE
  # Minimal deployment for development with minikube.
  minikube:
    values:
    - ingress:
        host: {{ env "IP_ADDRESS" | default "192.168.1.1" }}.nip.io
        service:
          type: LoadBalancer
        createSelfsignedCertificate: true
    - jupyterHub:
        enabled: false
    - argo:
        enabled: true
        clientID: T8DrPY49xlYvjsJ1nUIhxs17fG07gMZpQSOM7d3K
        clientSecret: 6TjANPj1oe59MexsTYdMV5yiSyOYULDEzkyxfff4CmAPFa8mQ1dhYE7BHeEEVyg1tRgTkXRWYj2zhiKLiLZvhUGDnrixQQDshrWVtWCgQX23Vmdo37ktuVmsgOEfO2eG
    - harbor:
        enabled: false
    - grafana:
        enabled: false
  # Use local folders instead of volumes for development on baremetal.
  baremetal:
    values:
    - ingress:
        host: {{ env "IP_ADDRESS" | default "192.168.1.1" }}.nip.io
        service:
          type: NodePort
          externalIPs:
          - {{ env "IP_ADDRESS" | default "192.168.1.1" }}
          # nodePorts:
          #   http: 30080
          #   https: 30443
        createSelfsignedCertificate: true
    - jupyterHub:
        enabled: true
        persistence:
          provisioning: local
          path: {{ requiredEnv "PWD" }}/db/jupyterhub
        # singleuserExtra: # Use to set a custom image.
        #   image:
        #     name: jupyterhub/k8s-singleuser-sample
        #     tag: "1.2.0"
        clientID: 56kSn87XXbk4GuFBQ7zQrXcVQNyyMWKb1vR2diUZ
        clientSecret: FvxWxBTbhgQbo1sGbc6yLsza0Vwo6jZQBpiOSDYcghCjWWcpRzBygzJSQ8M4CunflPn9pCOr25vVnGr0N2ytR6FjklSesc28BqkHSM6aVIYA5RKFZaOpiMj9Ghc5VDfN
    - argo:
        enabled: true
        clientID: T8DrPY49xlYvjsJ1nUIhxs17fG07gMZpQSOM7d3K
        clientSecret: 6TjANPj1oe59MexsTYdMV5yiSyOYULDEzkyxfff4CmAPFa8mQ1dhYE7BHeEEVyg1tRgTkXRWYj2zhiKLiLZvhUGDnrixQQDshrWVtWCgQX23Vmdo37ktuVmsgOEfO2eG
    - harbor:
        enabled: true
        persistence:
          provisioning: local
          path: {{ requiredEnv "PWD" }}/db/harbor
        adminPassword: Harbor12345
        secretKey: 4sdcg3urQQd00vHU
        clientID: XAOdj9vN5BAjKJD0XjRMlqNybdlRKCF1XcOJHmPT
        clientSecret: rgRQVzfZnoU9WAOqfni5hyC0bXZHjKPyLKOCUVfmBBWbVdaMRQfuep7lPKDjef5bZDxYc4OpiVjGMpXuRye872ATHejjMRKvfPAOA482uh2SjpwmIKUBigBZaVKFkYF3
    - grafana:
        enabled: true
        clientID: tSlY0FSd7tmS7jR0J6KLyIhisd9yYitlmyx3oVb3
        clientSecret: eYLaIV2NtZHhR7M9zh1ouLl4LpuwwpcrYBspXbS2gTCm61Hn01ghmZf7iBxxk5r3SdPHnlg6Ovm6IKK4CmJKNl8gnkvxjmOt7YOxZJR0BJH8DPHnA9Nh6pHpmESM8mfE
---
repositories:
- name: cert-manager
  url: https://charts.jetstack.io
- name: ingress-nginx
  url: https://kubernetes.github.io/ingress-nginx
- name: bedag
  url: https://bedag.github.io/helm-charts
{{- if .Values.jupyterHub.enabled }}
- name: jupyterhub
  url: https://jupyterhub.github.io/helm-chart/
{{- end }}
{{- if .Values.argo.enabled }}
- name: emberstack
  url: https://emberstack.github.io/helm-charts
- name: argo
  url: https://argoproj.github.io/argo-helm
{{- end }}
{{- if .Values.harbor.enabled }}
- name: harbor
  url: https://helm.goharbor.io
{{- end }}
{{- if .Values.grafana.enabled }}
- name: prometheus-community
  url: https://prometheus-community.github.io/helm-charts
{{- end }}
releases:
- name: cert-manager
  namespace: cert-manager
  createNamespace: true
  chart: cert-manager/cert-manager
  version: 1.6.1
  values:
  - installCRDs: true
- name: ingress
  namespace: ingress-nginx
  createNamespace: true
  chart: ingress-nginx/ingress-nginx
  version: 4.0.13
  values:
  - controller:
      watchIngressWithoutClass: true
      ingressClassResource:
        default: true
      {{- if eq .Values.ingress.service.type "NodePort" }}
      service:
        type: NodePort
        externalIPs:
        {{ toYaml .Values.ingress.service.externalIPs | nindent 8 }}
        {{- if sprigGet .Values.ingress.service "nodePorts" }}
        nodePorts:
          {{ toYaml .Values.ingress.service.nodePorts | nindent 10 }}
        {{- end }}
      {{- end }}
      admissionWebhooks:
        enabled: false
      extraArgs:
        default-ssl-certificate: ingress-nginx/ssl-certificate
{{- if .Values.ingress.createSelfsignedCertificate }}
- name: ingress-cert
  namespace: ingress-nginx
  createNamespace: true
  chart: bedag/raw
  needs:
  - cert-manager/cert-manager
  version: 1.1.0
  values:
  - resources:
    - apiVersion: cert-manager.io/v1
      kind: Issuer
      metadata:
        name: selfsigned
      spec:
        selfSigned: {}
    - apiVersion: cert-manager.io/v1
      kind: Certificate
      metadata:
        name: ssl-certificate
      spec:
        secretName: ssl-certificate
        {{- if or .Values.argo.enabled .Values.harbor.enabled }}
        secretTemplate:
          annotations:
            "reflector.v1.k8s.emberstack.com/reflection-allowed": "true"
            "reflector.v1.k8s.emberstack.com/reflection-allowed-namespaces": "default,argo,harbor"
            "reflector.v1.k8s.emberstack.com/reflection-auto-enabled": "true"
            "reflector.v1.k8s.emberstack.com/reflection-auto-namespaces": "default,argo,harbor"
        {{- end }}
        duration: 87600h
        commonName: {{ .Values.ingress.host }}
        dnsNames:
        - "{{ .Values.ingress.host }}"
        - "*.{{ .Values.ingress.host }}"
        privateKey:
          algorithm: RSA
          size: 2048
        issuerRef:
          name: selfsigned
{{- end }}
{{- if .Values.jupyterHub.enabled }}
- name: jupyterhub
  namespace: jupyterhub
  createNamespace: true
  chart: jupyterhub/jupyterhub
  version: 1.2.0
  values:
  - hub:
      config:
        JupyterHub:
          authenticator_class: generic-oauth
        Authenticator:
          auto_login: true
        GenericOAuthenticator:
          client_id: {{ .Values.jupyterHub.clientID }}
          client_secret: {{ .Values.jupyterHub.clientSecret }}
          {{- if .Values.ingress.createSelfsignedCertificate }}
          tls_verify: false
          {{- end }}
          oauth_callback_url: https://jupyterhub.{{ .Values.ingress.host }}/hub/oauth_callback
          authorize_url: https://{{ .Values.ingress.host }}/oauth/authorize/
          token_url: https://{{ .Values.ingress.host }}/oauth/token/
          userdata_url: https://{{ .Values.ingress.host }}/oauth/userinfo/
          scope:
          - openid
          - profile
          - email
          username_key: preferred_username
      extraConfig:
        "myConfig.py": |-
          c.ConfigurableHTTPProxy.api_url = "http://proxy-api.jupyterhub.svc:8001"
          c.JupyterHub.hub_connect_url = "http://hub.jupyterhub.svc:8081"
          c.KubeSpawner.enable_user_namespaces = True
          c.KubeSpawner.user_namespace_template = "karvdash-{username}"
          c.KubeSpawner.notebook_dir = "/private/notebooks"
      networkPolicy:
        enabled: false
      {{- if eq .Values.jupyterHub.persistence.provisioning "local" }}
      db:
        type: other
        upgrade: true
        url: sqlite:///jupyterhub.sqlite
      extraVolumes:
      - name: jupyterhub-volume
        hostPath:
          path: {{ .Values.jupyterHub.persistence.path | quote }}
      extraVolumeMounts:
      - name: jupyterhub-volume
        mountPath: /srv/jupyterhub
      {{- end }}
  - proxy:
      service:
        type: ClusterIP
      chp:
        networkPolicy:
          enabled: false
  - singleuser:
      networkPolicy:
        enabled: false
      storage:
        type: none
      {{- if sprigGet .Values.jupyterHub "singleuserExtra" }}
      {{ toYaml .Values.jupyterHub.singleuserExtra | nindent 6 }}
      {{- end }}
  - prePuller:
      hook:
        enabled: false
      continuous:
        enabled: false
  - scheduling:
      userScheduler:
        enabled: false
  - ingress:
      enabled: true
      hosts:
      - jupyterhub.{{ .Values.ingress.host }}
      annotations:
        "nginx.ingress.kubernetes.io/force-ssl-redirect": "true"
  {{- if eq .Values.jupyterHub.persistence.provisioning "local" }}
  hooks:
  - events: ["presync"]
    showlogs: true
    command: "/bin/bash"
    args:
    - "-c"
    - "mkdir -p {{ .Values.jupyterHub.persistence.path }} && chown 1000:1000 {{ .Values.jupyterHub.persistence.path }}"
  {{- end }}
- name: jupyterhub-oauth-secret
  namespace: jupyterhub
  createNamespace: true
  chart: bedag/raw
  version: 1.1.0
  values:
  - resources:
    - apiVersion: v1
      kind: Secret
      metadata:
        name: karvdash-oauth-jupyterhub
      type: Opaque
      data:
        client-id: {{ .Values.jupyterHub.clientID | b64enc }}
        client-secret: {{ .Values.jupyterHub.clientSecret | b64enc }}
- name: jupyterhub-clusterrolebinding
  namespace: jupyterhub
  createNamespace: true
  chart: bedag/raw
  version: 1.1.0
  values:
  - resources:
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: jupyterhub-cluster-admin
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: cluster-admin
      subjects:
      - kind: ServiceAccount
        name: hub
        namespace: jupyterhub
{{- end }}
{{- if or .Values.argo.enabled .Values.harbor.enabled }}
- name: reflector
  namespace: reflector
  createNamespace: true
  chart: emberstack/reflector
  version: 6.1.23
{{- end }}
{{- if .Values.argo.enabled }}
- name: argo
  namespace: argo
  createNamespace: true
  chart: argo/argo-workflows
  version: 0.9.3
  values:
  - controller:
      containerRuntimeExecutor: k8sapi
  - server:
      extraArgs:
      - "--auth-mode=sso"
      {{- if .Values.ingress.createSelfsignedCertificate }}
      volumeMounts:
      - name: ssl-certificate-volume
        mountPath: /etc/ssl/certs/{{ .Values.ingress.host }}.crt
        subPath: ca.crt
      volumes:
      - name: ssl-certificate-volume
        secret:
          secretName: ssl-certificate
      {{- end }}
      ingress:
        enabled: true
        hosts:
        - argo.{{ .Values.ingress.host }}
        annotations:
          "nginx.ingress.kubernetes.io/force-ssl-redirect": "true"
      sso:
        issuer: https://{{ .Values.ingress.host }}/oauth
        clientId:
          name: karvdash-oauth-argo
          key: client-id
        clientSecret:
          name: karvdash-oauth-argo
          key: client-secret
        redirectUrl: https://argo.{{ .Values.ingress.host }}/oauth2/callback
        rbac:
          enabled: true
- name: argo-oauth-secret
  namespace: argo
  createNamespace: true
  chart: bedag/raw
  version: 1.1.0
  values:
  - resources:
    - apiVersion: v1
      kind: Secret
      metadata:
        name: karvdash-oauth-argo
      type: Opaque
      data:
        client-id: {{ .Values.argo.clientID | b64enc }}
        client-secret: {{ .Values.argo.clientSecret | b64enc }}
{{- end }}
{{- if .Values.harbor.enabled }}
- name: harbor
  namespace: harbor
  createNamespace: true
  chart: harbor/harbor
  version: 1.8.1
  values:
  - expose:
      type: ingress
      tls:
        enabled: false
      ingress:
        hosts:
          core: harbor.{{ .Values.ingress.host }}
        annotations:
          "nginx.ingress.kubernetes.io/force-ssl-redirect": "true"
  - externalURL: https://harbor.{{ .Values.ingress.host }}
  {{- if eq .Values.harbor.persistence.provisioning "local" }}
  - persistence:
      persistentVolumeClaim:
        registry:
          existingClaim: harbor-pvc
          subPath: registry
        jobservice:
          existingClaim: harbor-pvc
          subPath: jobservice
        database:
          existingClaim: harbor-pvc
          subPath: database
        redis:
          existingClaim: harbor-pvc
          subPath: redis
  {{- end }}
  - harborAdminPassword: {{ .Values.harbor.adminPassword | quote }}
  - secretKey: {{ .Values.harbor.secretKey | quote }}
  {{- if .Values.ingress.createSelfsignedCertificate }}
  - caBundleSecretName: ssl-certificate
  {{- end }}
  - chartmuseum:
      enabled: false
  - trivy:
      enabled: false
  - notary:
      enabled: false
{{- if eq .Values.harbor.persistence.provisioning "local" }}
- name: harbor-persistentvolumeclaim
  namespace: harbor
  createNamespace: true
  chart: bedag/raw
  version: 1.1.0
  values:
  - resources:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: harbor-pvc
      spec:
        storageClassName: ""
        volumeName: harbor-pv
        accessModes:
          - ReadWriteMany
        resources:
          requests:
            storage: 1Ti
    - apiVersion: v1
      kind: PersistentVolume
      metadata:
        name: harbor-pv
      spec:
        accessModes:
          - ReadWriteMany
        capacity:
          storage: 1Ti
        persistentVolumeReclaimPolicy: Retain
        hostPath:
          path: {{ .Values.harbor.persistence.path }}
  hooks:
  - events: ["presync"]
    showlogs: true
    command: "/bin/bash"
    args:
    - "-c"
    - "mkdir -p {{ .Values.harbor.persistence.path }} && chown 999:999 {{ .Values.harbor.persistence.path }}"
{{- end }}
- name: harbor-oauth-secret
  namespace: harbor
  createNamespace: true
  chart: bedag/raw
  version: 1.1.0
  values:
  - resources:
    - apiVersion: v1
      kind: Secret
      metadata:
        name: karvdash-oauth-harbor
      type: Opaque
      data:
        client-id: {{ .Values.harbor.clientID | b64enc }}
        client-secret: {{ .Values.harbor.clientSecret | b64enc }}
{{- end }}
{{- if .Values.grafana.enabled }}
- name: monitoring
  namespace: monitoring
  createNamespace: true
  chart: prometheus-community/kube-prometheus-stack
  version: 32.2.0
  values:
  - alertmanager:
      enabled: false
  - grafana:
      ingress:
        enabled: true
        annotations:
          "nginx.ingress.kubernetes.io/force-ssl-redirect": "true"
        hosts:
        - grafana.{{ .Values.ingress.host }}
      "grafana.ini":
        auth:
          oauth_auto_login: true
          disable_login_form: true
          disable_signout_menu: false
        "auth.generic_oauth":
          enabled: true
          allow_sign_up: true
          client_id: {{ .Values.grafana.clientID }}
          client_secret: {{ .Values.grafana.clientSecret }}
          {{- if .Values.ingress.createSelfsignedCertificate }}
          tls_skip_verify_insecure: true
          {{- end }}
          auth_url: https://{{ .Values.ingress.host }}/oauth/authorize/
          token_url: https://{{ .Values.ingress.host }}/oauth/token/
          api_url: https://{{ .Values.ingress.host }}/oauth/userinfo/
          scopes: "openid profile email"
          login_attribute_path: preferred_username
          name_attribute_path: name
          email_attribute_name: email
        server:
          root_url: https://grafana.{{ .Values.ingress.host }}
        users:
          allow_sign_up: false
  - prometheus-node-exporter:
      hostRootFsMount: false
- name: grafana-oauth-secret
  namespace: monitoring
  createNamespace: true
  chart: bedag/raw
  version: 1.1.0
  values:
  - resources:
    - apiVersion: v1
      kind: Secret
      metadata:
        name: karvdash-oauth-grafana
      type: Opaque
      data:
        client-id: {{ .Values.grafana.clientID | b64enc }}
        client-secret: {{ .Values.grafana.clientSecret | b64enc }}
{{- end }}
